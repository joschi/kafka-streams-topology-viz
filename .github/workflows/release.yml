name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@2a2412009026a83f51d179f92dc2b3fd4c8142df # v1.4.1
        with:
          java-version: '25'
          distribution: 'graalvm'
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build JAR
        shell: bash
        # language=bash
        run: |
          ./mvnw --no-transfer-progress --batch-mode -Pshade 

      - name: Upload JAR
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: kafka-streams-topology-viz-cli
          path: target/kafka-streams-topology-viz-*-cli.jar
          retention-days: 1
          if-no-files-found: error

  build-native:
    needs: [ build-jar ]
    name: Build Native Image (${{ matrix.os }}-${{ matrix.arch }})
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            os_name: linux
            arch: x86_64
          - os: ubuntu-24.04-arm
            os_name: linux
            arch: aarch64
          # macOS builds
          - os: macos-15
            os_name: osx
            arch: aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download CLI artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: kafka-streams-topology-viz-cli
          path: target/

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@2a2412009026a83f51d179f92dc2b3fd4c8142df # v1.4.1
        with:
          java-version: '25'
          distribution: 'graalvm'
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Native Image (${{ matrix.os_name }}-${{ matrix.arch }})
        env:
          JRELEASER_PLATFORM: ${{ matrix.os_name }}-${{ matrix.arch }}
          JRELEASER_ASSEMBLE_NATIVE_IMAGE_ACTIVE: ALWAYS
        # language=bash
        run: |
          export GRAALVM_HOME=$JAVA_HOME
          ./mvnw --no-transfer-progress --batch-mode -Djreleaser.select.current.platform jreleaser:assemble 

      - name: Upload Native Image
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: native-image-${{ matrix.os_name }}-${{ matrix.arch }}
          path: target/jreleaser/assemble/kafka-streams-topology-viz/native-image/kafka-streams-topology-viz-${{ matrix.os_name }}-${{ matrix.arch }}
          retention-days: 1
          if-no-files-found: error

  release:
    name: Create Release
    needs: [ build-jar, build-native ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download native artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: native-image-*
          path: target/jreleaser/assemble/kafka-streams-topology-viz/native-image/
          merge-multiple: true

      - name: Download CLI artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: kafka-streams-topology-viz-cli
          path: target/

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@2a2412009026a83f51d179f92dc2b3fd4c8142df # v1.4.1
        with:
          java-version: '25'
          distribution: 'graalvm'
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build project
        # language=bash
        run: |
          ./mvnw --no-transfer-progress --batch-mode -Ppublication

      - name: Show staged artifacts for Maven Central
        shell: bash
        # language=bash
        run: |
          set -x
          ls -la target/staging-deploy/
          ls -la target/jreleaser/assemble/kafka-streams-topology-viz/native-image/

      - name: Run JReleaser
        shell: bash
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_TOKEN: ${{ secrets.JRELEASER_MAVENCENTRAL_SONATYPE_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        # language=bash
        run: |
          # Run JReleaser full-release (includes GitHub release and Maven Central deployment)
          ./mvnw --no-transfer-progress --batch-mode jreleaser:full-release

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: jreleaser-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
